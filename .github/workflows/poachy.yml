name: Poachy CI

on:
  push:
    branches: ["master", "main"]
  pull_request:
    branches: ["master", "main"]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      MYSQL_DATABASE: poachy
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: poachy
      DB_USERNAME: ${{ secrets.MYSQL_USER }}
      DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      # Cache Composer dependencies for faster builds
      - name: Cache Composer Dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      # Set up PHP environment
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, exif, pcntl, bcmath, gd, pdo_mysql
          ini-values: post_max_size=256M, upload_max_filesize=256M, memory_limit=512M, max_execution_time=120
          coverage: none

      # Ensure .env file exists
      - name: Ensure .env File
        run: |
          if [ ! -f .env ]; then
            cp .env.example .env
          fi

      # Set environment variables
      - name: Set Environment Variables
        run: |
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=${{ env.MYSQL_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.MYSQL_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env

      # Install Composer dependencies
      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      # Set up MySQL database for testing
      - name: Set up MySQL database
        run: |
          docker run -d --rm --name mysql \
            -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} \
            -e MYSQL_DATABASE=${{ env.MYSQL_DATABASE }} \
            -e MYSQL_USER=${{ secrets.MYSQL_USER }} \
            -e MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
            -p 3306:3306 mysql:5.7

          # Wait for MySQL to be ready
          until docker exec mysql mysqladmin ping -h "127.0.0.1" --silent; do
            echo 'Waiting for MySQL...'
            sleep 3
          done

      - name: Grant MySQL Privileges
        run: |
          docker exec mysql sh -c 'mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} -e "GRANT ALL PRIVILEGES ON *.* TO \"${{ secrets.MYSQL_USER }}\"@\"%\"; FLUSH PRIVILEGES;"'

      # Generate Laravel application key
      - name: Generate Application Key
        run: php artisan key:generate

      # Run migrations
      - name: Run Migrations
        run: php artisan migrate --force

      # Run tenant migrations
      - name: Run Tenant Migrations
        run: php artisan tenants:migrate --force

      # Set appropriate directory permissions
      - name: Set Directory Permissions
        run: chmod -R 755 storage bootstrap/cache

      # Run Tests with MySQL Database
      - name: Run Tests
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: ${{ env.MYSQL_DATABASE }}
          DB_USERNAME: ${{ secrets.MYSQL_USER }}
          DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          CENTRAL_DOMAINS: localhost,127.0.0.1
        run: php artisan test

  docker-build:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - uses: actions/checkout@v4

      # Ensure .env file exists
      - name: Ensure .env File
        run: |
          if [ ! -f .env ]; then
            cp .env.example .env
          fi

      # Set environment variables for Docker
      - name: Set Environment Variables
        run: |
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

      # Build Docker images with docker compose
      - name: Build Docker Images
        run: |
          docker compose -f docker-compose.yml up -d --build
          docker ps

      # Verify app container is running
      - name: Check if the app container is running
        run: |
          app_container=$(docker ps -q -f name=poachy)
          if [ -z "$app_container" ]; then
            echo "App container is not running, exiting."
            exit 1
          else
            echo "App container is running."
          fi

      # Verify database container is running
      - name: Check if the database container is running
        run: |
          db_container=$(docker ps -q -f name=db)
          if [ -z "$db_container" ]; then
            echo "Database container is not running, exiting."
            exit 1
          else
            echo "Database container is running."
          fi

      # Stop and remove containers after checks
      - name: Stop and Remove Containers
        run: docker compose down

  deploy:
    runs-on: ubuntu-latest
    needs:
      - test
      - docker-build
    # Deploy on pushes to main/master OR on pull requests targeting main/master
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'master'))

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to Server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
          set -e  # Exit on any error

          echo "Navigating to project directory..."
          cd ${{ secrets.PROJECT_PATH }} || { echo "Error: Project directory not found"; exit 1; }

          echo "Pulling latest changes from Git..."
          git pull origin ${{ github.ref_name }} || { echo "Error: git pull failed"; exit 1; }

          echo "Restarting containers..."
          docker compose restart || { echo "Warning: docker compose restart failed"; }

          echo "Waiting for containers to be healthy..."
          sleep 10

          echo "Deployment completed successfully!"
          EOF
